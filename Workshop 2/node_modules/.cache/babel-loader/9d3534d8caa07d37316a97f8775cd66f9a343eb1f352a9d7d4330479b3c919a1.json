{"ast":null,"code":"import * as e from \"react\";\nexport function useSize(r) {\n  const [i, t] = e.useState(void 0);\n  return e.useEffect(() => {\n    if (r) {\n      const e = new ResizeObserver(e => {\n        if (!Array.isArray(e)) return;\n        if (!e.length) return;\n        const i = e[0];\n        let o, n;\n        if (\"borderBoxSize\" in i) {\n          const e = i.borderBoxSize,\n            r = Array.isArray(e) ? e[0] : e;\n          o = r.inlineSize, n = r.blockSize;\n        } else {\n          const e = r.getBoundingClientRect();\n          o = e.width, n = e.height;\n        }\n        t({\n          width: o,\n          height: n\n        });\n      });\n      return e.observe(r, {\n        box: \"border-box\"\n      }), () => {\n        t(void 0), e.unobserve(r);\n      };\n    }\n  }, [r]), i;\n}","map":{"version":3,"names":["useSize","r","i","t","e","useState","useEffect","ResizeObserver","Array","isArray","length","o","n","borderBoxSize","inlineSize","blockSize","getBoundingClientRect","width","height","observe","box","unobserve"],"sources":["/home/edgar/Documents/Epitech/Tek2/Projects/React-Three-Js-Workshop2-edgar-dion/Workshop 2/node_modules/leva/node_modules/@radix-ui/react-tooltip/node_modules/@radix-ui/react-popper/node_modules/@radix-ui/react-use-size/dist/packages/react/use-size/src/useSize.tsx"],"sourcesContent":["/// <reference types=\"resize-observer-browser\" />\n\nimport * as React from 'react';\n\nfunction useSize(element: HTMLElement | SVGElement | null) {\n  const [size, setSize] = React.useState<{ width: number; height: number } | undefined>(undefined);\n\n  React.useEffect(() => {\n    if (element) {\n      const resizeObserver = new ResizeObserver((entries) => {\n        if (!Array.isArray(entries)) {\n          return;\n        }\n\n        // Since we only observe the one element, we don't need to loop over the\n        // array\n        if (!entries.length) {\n          return;\n        }\n\n        const entry = entries[0];\n        let width: number;\n        let height: number;\n\n        if ('borderBoxSize' in entry) {\n          const borderSizeEntry = entry['borderBoxSize'];\n          // iron out differences between browsers\n          const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;\n          width = borderSize['inlineSize'];\n          height = borderSize['blockSize'];\n        } else {\n          // for browsers that don't support `borderBoxSize`\n          // we calculate a rect ourselves to get the correct border box.\n          const rect = element.getBoundingClientRect();\n          width = rect.width;\n          height = rect.height;\n        }\n\n        setSize({ width, height });\n      });\n\n      resizeObserver.observe(element, { box: 'border-box' });\n\n      return () => {\n        setSize(undefined);\n        resizeObserver.unobserve(element);\n      };\n    }\n    return;\n  }, [element]);\n\n  return size;\n}\n\nexport { useSize };\n"],"mappings":";OAIA,SAASA,QAAQC,CAAA;EACf,OAAOC,CAAA,EAAMC,CAAA,IAAWC,CAAA,CAAMC,QAAA,MAAwD;EA8CtF,OA5CAD,CAAA,CAAME,SAAA,CAAU;IACd,IAAIL,CAAA,EAAS;MACX,MAAMG,CAAA,GAAiB,IAAIG,cAAA,CAAgBH,CAAA;QACzC,KAAKI,KAAA,CAAMC,OAAA,CAAQL,CAAA,GACjB;QAKF,KAAKA,CAAA,CAAQM,MAAA,EACX;QAGF,MAAMR,CAAA,GAAQE,CAAA,CAAQ;QACtB,IAAIO,CAAA,EACAC,CAAA;QAEJ,IAAI,mBAAmBV,CAAA,EAAO;UAC5B,MAAME,CAAA,GAAkBF,CAAA,CAAKW,aAAA;YAEvBZ,CAAA,GAAaO,KAAA,CAAMC,OAAA,CAAQL,CAAA,IAAmBA,CAAA,CAAgB,KAAKA,CAAA;UACzEO,CAAA,GAAQV,CAAA,CAAUa,UAAA,EAClBF,CAAA,GAASX,CAAA,CAAUc,SAAA;QAAA,OACd;UAGL,MAAMX,CAAA,GAAOH,CAAA,CAAQe,qBAAA;UACrBL,CAAA,GAAQP,CAAA,CAAKa,KAAA,EACbL,CAAA,GAASR,CAAA,CAAKc,MAAA;QAAA;QAGhBf,CAAA,CAAQ;UAAEc,KAAA,EAAAN,CAAA;UAAOO,MAAA,EAAAN;QAAA;MAAA;MAKnB,OAFAR,CAAA,CAAee,OAAA,CAAQlB,CAAA,EAAS;QAAEmB,GAAA,EAAK;MAAA,IAEhC;QACLjB,CAAA,MAAQ,IACRC,CAAA,CAAeiB,SAAA,CAAUpB,CAAA;MAAA;IAAA;EAAA,GAI5B,CAACA,CAAA,IAEGC,CAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}