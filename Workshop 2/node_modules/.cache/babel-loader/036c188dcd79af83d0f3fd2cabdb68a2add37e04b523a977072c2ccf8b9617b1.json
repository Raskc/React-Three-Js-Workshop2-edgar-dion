{"ast":null,"code":"import { useId as e } from \"@radix-ui/react-id\";\nimport * as o from \"@radix-ui/react-visually-hidden\";\nimport { Slottable as t } from \"@radix-ui/react-slot\";\nimport { Portal as r } from \"@radix-ui/react-portal\";\nimport * as n from \"@radix-ui/react-popper\";\nimport { createPopperScope as i } from \"@radix-ui/react-popper\";\nimport { Primitive as a } from \"@radix-ui/react-primitive\";\nimport { Presence as l } from \"@radix-ui/react-presence\";\nimport { useRect as c } from \"@radix-ui/react-use-rect\";\nimport { usePrevious as s } from \"@radix-ui/react-use-previous\";\nimport { useEscapeKeydown as u } from \"@radix-ui/react-use-escape-keydown\";\nimport { useControllableState as p } from \"@radix-ui/react-use-controllable-state\";\nimport { createContextScope as d } from \"@radix-ui/react-context\";\nimport { useComposedRefs as m } from \"@radix-ui/react-compose-refs\";\nimport { composeEventHandlers as f } from \"@radix-ui/primitive\";\nimport * as T from \"react\";\nimport C from \"@babel/runtime/helpers/esm/extends\";\nconst [w, x] = d(\"Tooltip\", [i]);\nexport { x as createTooltipScope };\nconst g = i(),\n  E = 700,\n  [v, b] = w(\"TooltipProvider\", {\n    isOpenDelayed: !0,\n    delayDuration: E,\n    onOpen: () => {},\n    onClose: () => {}\n  });\nexport const TooltipProvider = e => {\n  const {\n      __scopeTooltip: o,\n      delayDuration: t = E,\n      skipDelayDuration: r = 300,\n      children: n\n    } = e,\n    [i, a] = T.useState(!0),\n    l = T.useRef(0);\n  return T.useEffect(() => {\n    const e = l.current;\n    return () => window.clearTimeout(e);\n  }, []), /*#__PURE__*/T.createElement(v, {\n    scope: o,\n    isOpenDelayed: i,\n    delayDuration: t,\n    onOpen: T.useCallback(() => {\n      window.clearTimeout(l.current), a(!1);\n    }, []),\n    onClose: T.useCallback(() => {\n      window.clearTimeout(l.current), l.current = window.setTimeout(() => a(!0), r);\n    }, [r])\n  }, n);\n}; /*#__PURE__*/\nconst [y, _] = w(\"Tooltip\");\nexport const Tooltip = o => {\n  const {\n      __scopeTooltip: t,\n      children: r,\n      open: i,\n      defaultOpen: a = !1,\n      onOpenChange: l,\n      delayDuration: c\n    } = o,\n    s = b(\"Tooltip\", t),\n    u = g(t),\n    [d, m] = T.useState(null),\n    f = e(),\n    C = T.useRef(0),\n    w = null != c ? c : s.delayDuration,\n    x = T.useRef(!1),\n    {\n      onOpen: E,\n      onClose: v\n    } = s,\n    [_ = !1, h] = p({\n      prop: i,\n      defaultProp: a,\n      onChange: e => {\n        e && (document.dispatchEvent(new CustomEvent(\"tooltip.open\")), E()), null == l || l(e);\n      }\n    }),\n    k = T.useMemo(() => _ ? x.current ? \"delayed-open\" : \"instant-open\" : \"closed\", [_]),\n    D = T.useCallback(() => {\n      window.clearTimeout(C.current), x.current = !1, h(!0);\n    }, [h]),\n    O = T.useCallback(() => {\n      window.clearTimeout(C.current), C.current = window.setTimeout(() => {\n        x.current = !0, h(!0);\n      }, w);\n    }, [w, h]);\n  return T.useEffect(() => () => window.clearTimeout(C.current), []), /*#__PURE__*/T.createElement(n.Root, u, /*#__PURE__*/T.createElement(y, {\n    scope: t,\n    contentId: f,\n    open: _,\n    stateAttribute: k,\n    trigger: d,\n    onTriggerChange: m,\n    onTriggerEnter: T.useCallback(() => {\n      s.isOpenDelayed ? O() : D();\n    }, [s.isOpenDelayed, O, D]),\n    onOpen: T.useCallback(D, [D]),\n    onClose: T.useCallback(() => {\n      window.clearTimeout(C.current), h(!1), v();\n    }, [h, v])\n  }, r));\n}; /*#__PURE__*/\nexport const TooltipTrigger = /*#__PURE__*/T.forwardRef((e, o) => {\n  const {\n      __scopeTooltip: t,\n      ...r\n    } = e,\n    i = _(\"TooltipTrigger\", t),\n    l = g(t),\n    c = m(o, i.onTriggerChange),\n    s = T.useRef(!1),\n    u = T.useCallback(() => s.current = !1, []);\n  return T.useEffect(() => () => document.removeEventListener(\"mouseup\", u), [u]), /*#__PURE__*/T.createElement(n.Anchor, C({\n    asChild: !0\n  }, l), /*#__PURE__*/T.createElement(a.button, C({\n    \"aria-describedby\": i.open ? i.contentId : void 0,\n    \"data-state\": i.stateAttribute\n  }, r, {\n    ref: c,\n    onMouseEnter: f(e.onMouseEnter, i.onTriggerEnter),\n    onMouseLeave: f(e.onMouseLeave, i.onClose),\n    onMouseDown: f(e.onMouseDown, () => {\n      i.onClose(), s.current = !0, document.addEventListener(\"mouseup\", u, {\n        once: !0\n      });\n    }),\n    onFocus: f(e.onFocus, () => {\n      s.current || i.onOpen();\n    }),\n    onBlur: f(e.onBlur, i.onClose),\n    onClick: f(e.onClick, i.onClose)\n  })));\n}); /*#__PURE__*/\nexport const TooltipContent = /*#__PURE__*/T.forwardRef((e, o) => {\n  const {\n      forceMount: t,\n      ...r\n    } = e,\n    n = _(\"TooltipContent\", e.__scopeTooltip); /*#__PURE__*/\n  return T.createElement(l, {\n    present: t || n.open\n  }, /*#__PURE__*/T.createElement(h, C({\n    ref: o\n  }, r)));\n});\nconst h = /*#__PURE__*/T.forwardRef((e, i) => {\n  const {\n      __scopeTooltip: a,\n      children: l,\n      \"aria-label\": c,\n      portalled: s = !0,\n      ...p\n    } = e,\n    d = _(\"TooltipContent\", a),\n    m = g(a),\n    f = s ? r : T.Fragment,\n    {\n      onClose: w\n    } = d;\n  return u(() => w()), T.useEffect(() => (document.addEventListener(\"tooltip.open\", w), () => document.removeEventListener(\"tooltip.open\", w)), [w]), /*#__PURE__*/T.createElement(f, null, /*#__PURE__*/T.createElement(k, {\n    __scopeTooltip: a\n  }), /*#__PURE__*/T.createElement(n.Content, C({\n    \"data-state\": d.stateAttribute\n  }, m, p, {\n    ref: i,\n    style: {\n      ...p.style,\n      \"--radix-tooltip-content-transform-origin\": \"var(--radix-popper-transform-origin)\"\n    }\n  }), /*#__PURE__*/T.createElement(t, null, l), /*#__PURE__*/T.createElement(o.Root, {\n    id: d.contentId,\n    role: \"tooltip\"\n  }, c || l)));\n}); /*#__PURE__*/\nexport const TooltipArrow = /*#__PURE__*/T.forwardRef((e, o) => {\n  const {\n      __scopeTooltip: t,\n      ...r\n    } = e,\n    i = g(t); /*#__PURE__*/\n  return T.createElement(n.Arrow, C({}, i, r, {\n    ref: o\n  }));\n}); /*#__PURE__*/\nfunction k(e) {\n  const {\n      __scopeTooltip: o\n    } = e,\n    t = _(\"CheckTriggerMoved\", o),\n    r = c(t.trigger),\n    n = null == r ? void 0 : r.left,\n    i = s(n),\n    a = null == r ? void 0 : r.top,\n    l = s(a),\n    u = t.onClose;\n  return T.useEffect(() => {\n    (void 0 !== i && i !== n || void 0 !== l && l !== a) && u();\n  }, [u, i, l, n, a]), null;\n}\nexport const Provider = TooltipProvider;\nexport const Root = Tooltip;\nexport const Trigger = TooltipTrigger;\nexport const Content = TooltipContent;\nexport const Arrow = TooltipArrow;","map":{"version":3,"names":["w","x","d","i","createTooltipScope","g","E","v","b","isOpenDelayed","delayDuration","onOpen","onClose","TooltipProvider","e","__scopeTooltip","o","t","skipDelayDuration","r","children","n","a","T","useState","l","useRef","useEffect","current","window","clearTimeout","createElement","scope","useCallback","setTimeout","y","_","Tooltip","open","defaultOpen","onOpenChange","c","s","u","m","f","C","h","p","prop","defaultProp","onChange","document","dispatchEvent","CustomEvent","k","useMemo","D","O","Root","contentId","stateAttribute","trigger","onTriggerChange","onTriggerEnter","TooltipTrigger","forwardRef","removeEventListener","Anchor","asChild","button","ref","onMouseEnter","onMouseLeave","onMouseDown","addEventListener","once","onFocus","onBlur","onClick","TooltipContent","forceMount","present","portalled","Fragment","Content","style","id","role","TooltipArrow","Arrow","left","top","Provider","Trigger"],"sources":["/home/edgar/Documents/Epitech/Tek2/Projects/React-Three-Js-Workshop2-edgar-dion/Workshop 2/node_modules/leva/node_modules/@radix-ui/react-tooltip/dist/packages/react/tooltip/src/Tooltip.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useEscapeKeydown } from '@radix-ui/react-use-escape-keydown';\nimport { usePrevious } from '@radix-ui/react-use-previous';\nimport { useRect } from '@radix-ui/react-use-rect';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as PopperPrimitive from '@radix-ui/react-popper';\nimport { createPopperScope } from '@radix-ui/react-popper';\nimport { Portal } from '@radix-ui/react-portal';\nimport { Slottable } from '@radix-ui/react-slot';\nimport * as VisuallyHiddenPrimitive from '@radix-ui/react-visually-hidden';\nimport { useId } from '@radix-ui/react-id';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\ntype ScopedProps<P = {}> = P & { __scopeTooltip?: Scope };\nconst [createTooltipContext, createTooltipScope] = createContextScope('Tooltip', [\n  createPopperScope,\n]);\nconst usePopperScope = createPopperScope();\n\n/* -------------------------------------------------------------------------------------------------\n * TooltipProvider\n * -----------------------------------------------------------------------------------------------*/\n\nconst PROVIDER_NAME = 'TooltipProvider';\nconst DEFAULT_DELAY_DURATION = 700;\nconst TOOLTIP_OPEN = 'tooltip.open';\n\ntype TooltipProviderContextValue = {\n  isOpenDelayed: boolean;\n  delayDuration: number;\n  onOpen(): void;\n  onClose(): void;\n};\n\nconst [TooltipProviderContextProvider, useTooltipProviderContext] =\n  createTooltipContext<TooltipProviderContextValue>(PROVIDER_NAME, {\n    isOpenDelayed: true,\n    delayDuration: DEFAULT_DELAY_DURATION,\n    onOpen: () => {},\n    onClose: () => {},\n  });\n\ninterface TooltipProviderProps {\n  /**\n   * The duration from when the mouse enters the trigger until the tooltip gets opened.\n   * @defaultValue 700\n   */\n  delayDuration?: number;\n  /**\n   * How much time a user has to enter another trigger without incurring a delay again.\n   * @defaultValue 300\n   */\n  skipDelayDuration?: number;\n  children: React.ReactNode;\n}\n\nconst TooltipProvider: React.FC<TooltipProviderProps> = (\n  props: ScopedProps<TooltipProviderProps>\n) => {\n  const {\n    __scopeTooltip,\n    delayDuration = DEFAULT_DELAY_DURATION,\n    skipDelayDuration = 300,\n    children,\n  } = props;\n  const [isOpenDelayed, setIsOpenDelayed] = React.useState(true);\n  const skipDelayTimerRef = React.useRef(0);\n\n  React.useEffect(() => {\n    const skipDelayTimer = skipDelayTimerRef.current;\n    return () => window.clearTimeout(skipDelayTimer);\n  }, []);\n\n  return (\n    <TooltipProviderContextProvider\n      scope={__scopeTooltip}\n      isOpenDelayed={isOpenDelayed}\n      delayDuration={delayDuration}\n      onOpen={React.useCallback(() => {\n        window.clearTimeout(skipDelayTimerRef.current);\n        setIsOpenDelayed(false);\n      }, [])}\n      onClose={React.useCallback(() => {\n        window.clearTimeout(skipDelayTimerRef.current);\n        skipDelayTimerRef.current = window.setTimeout(\n          () => setIsOpenDelayed(true),\n          skipDelayDuration\n        );\n      }, [skipDelayDuration])}\n    >\n      {children}\n    </TooltipProviderContextProvider>\n  );\n};\n\nTooltipProvider.displayName = PROVIDER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * Tooltip\n * -----------------------------------------------------------------------------------------------*/\n\nconst TOOLTIP_NAME = 'Tooltip';\n\ntype TooltipContextValue = {\n  contentId: string;\n  open: boolean;\n  stateAttribute: 'closed' | 'delayed-open' | 'instant-open';\n  trigger: TooltipTriggerElement | null;\n  onTriggerChange(trigger: TooltipTriggerElement | null): void;\n  onTriggerEnter(): void;\n  onOpen(): void;\n  onClose(): void;\n};\n\nconst [TooltipContextProvider, useTooltipContext] =\n  createTooltipContext<TooltipContextValue>(TOOLTIP_NAME);\n\ninterface TooltipProps {\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?: (open: boolean) => void;\n\n  /**\n   * The duration from when the mouse enters the trigger until the tooltip gets opened. This will\n   * override the prop with the same name passed to Provider.\n   * @defaultValue 700\n   */\n  delayDuration?: number;\n  children?: React.ReactNode;\n}\n\nconst Tooltip: React.FC<TooltipProps> = (props: ScopedProps<TooltipProps>) => {\n  const {\n    __scopeTooltip,\n    children,\n    open: openProp,\n    defaultOpen = false,\n    onOpenChange,\n    delayDuration: delayDurationProp,\n  } = props;\n  const context = useTooltipProviderContext(TOOLTIP_NAME, __scopeTooltip);\n  const popperScope = usePopperScope(__scopeTooltip);\n  const [trigger, setTrigger] = React.useState<HTMLButtonElement | null>(null);\n  const contentId = useId();\n  const openTimerRef = React.useRef(0);\n  const delayDuration = delayDurationProp ?? context.delayDuration;\n  const wasOpenDelayedRef = React.useRef(false);\n  const { onOpen, onClose } = context;\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: (open) => {\n      if (open) {\n        // we dispatch here so `TooltipProvider` isn't required to\n        // ensure other tooltips are aware of this one opening.\n        document.dispatchEvent(new CustomEvent(TOOLTIP_OPEN));\n        onOpen();\n      }\n      onOpenChange?.(open);\n    },\n  });\n  const stateAttribute = React.useMemo(() => {\n    return open ? (wasOpenDelayedRef.current ? 'delayed-open' : 'instant-open') : 'closed';\n  }, [open]);\n\n  const handleOpen = React.useCallback(() => {\n    window.clearTimeout(openTimerRef.current);\n    wasOpenDelayedRef.current = false;\n    setOpen(true);\n  }, [setOpen]);\n\n  const handleDelayedOpen = React.useCallback(() => {\n    window.clearTimeout(openTimerRef.current);\n    openTimerRef.current = window.setTimeout(() => {\n      wasOpenDelayedRef.current = true;\n      setOpen(true);\n    }, delayDuration);\n  }, [delayDuration, setOpen]);\n\n  React.useEffect(() => {\n    return () => window.clearTimeout(openTimerRef.current);\n  }, []);\n\n  return (\n    <PopperPrimitive.Root {...popperScope}>\n      <TooltipContextProvider\n        scope={__scopeTooltip}\n        contentId={contentId}\n        open={open}\n        stateAttribute={stateAttribute}\n        trigger={trigger}\n        onTriggerChange={setTrigger}\n        onTriggerEnter={React.useCallback(() => {\n          if (context.isOpenDelayed) handleDelayedOpen();\n          else handleOpen();\n        }, [context.isOpenDelayed, handleDelayedOpen, handleOpen])}\n        onOpen={React.useCallback(handleOpen, [handleOpen])}\n        onClose={React.useCallback(() => {\n          window.clearTimeout(openTimerRef.current);\n          setOpen(false);\n          onClose();\n        }, [setOpen, onClose])}\n      >\n        {children}\n      </TooltipContextProvider>\n    </PopperPrimitive.Root>\n  );\n};\n\nTooltip.displayName = TOOLTIP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * TooltipTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'TooltipTrigger';\n\ntype TooltipTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface TooltipTriggerProps extends PrimitiveButtonProps {}\n\nconst TooltipTrigger = React.forwardRef<TooltipTriggerElement, TooltipTriggerProps>(\n  (props: ScopedProps<TooltipTriggerProps>, forwardedRef) => {\n    const { __scopeTooltip, ...triggerProps } = props;\n    const context = useTooltipContext(TRIGGER_NAME, __scopeTooltip);\n    const popperScope = usePopperScope(__scopeTooltip);\n    const composedTriggerRef = useComposedRefs(forwardedRef, context.onTriggerChange);\n    const isMouseDownRef = React.useRef(false);\n    const handleMouseUp = React.useCallback(() => (isMouseDownRef.current = false), []);\n\n    React.useEffect(() => {\n      return () => document.removeEventListener('mouseup', handleMouseUp);\n    }, [handleMouseUp]);\n\n    return (\n      <PopperPrimitive.Anchor asChild {...popperScope}>\n        <Primitive.button\n          // We purposefully avoid adding `type=button` here because tooltip triggers are also\n          // commonly anchors and the anchor `type` attribute signifies MIME type.\n          aria-describedby={context.open ? context.contentId : undefined}\n          data-state={context.stateAttribute}\n          {...triggerProps}\n          ref={composedTriggerRef}\n          onMouseEnter={composeEventHandlers(props.onMouseEnter, context.onTriggerEnter)}\n          onMouseLeave={composeEventHandlers(props.onMouseLeave, context.onClose)}\n          onMouseDown={composeEventHandlers(props.onMouseDown, () => {\n            context.onClose();\n            isMouseDownRef.current = true;\n            document.addEventListener('mouseup', handleMouseUp, { once: true });\n          })}\n          onFocus={composeEventHandlers(props.onFocus, () => {\n            if (!isMouseDownRef.current) context.onOpen();\n          })}\n          onBlur={composeEventHandlers(props.onBlur, context.onClose)}\n          // Handle anything that the browser considers a click for the element type if\n          // not using pointer e.g. Space keyup and Enter keydown\n          onClick={composeEventHandlers(props.onClick, context.onClose)}\n        />\n      </PopperPrimitive.Anchor>\n    );\n  }\n);\n\nTooltipTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * TooltipContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'TooltipContent';\n\ntype TooltipContentElement = TooltipContentImplElement;\ninterface TooltipContentProps extends TooltipContentImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst TooltipContent = React.forwardRef<TooltipContentElement, TooltipContentProps>(\n  (props: ScopedProps<TooltipContentProps>, forwardedRef) => {\n    const { forceMount, ...contentProps } = props;\n    const context = useTooltipContext(CONTENT_NAME, props.__scopeTooltip);\n    return (\n      <Presence present={forceMount || context.open}>\n        <TooltipContentImpl ref={forwardedRef} {...contentProps} />\n      </Presence>\n    );\n  }\n);\n\ntype TooltipContentImplElement = React.ElementRef<typeof PopperPrimitive.Content>;\ntype PopperContentProps = Radix.ComponentPropsWithoutRef<typeof PopperPrimitive.Content>;\ninterface TooltipContentImplProps extends PopperContentProps {\n  /**\n   * A more descriptive label for accessibility purpose\n   */\n  'aria-label'?: string;\n\n  /**\n   * Whether the Tooltip should render in a Portal\n   * (default: `true`)\n   */\n  portalled?: boolean;\n}\n\nconst TooltipContentImpl = React.forwardRef<TooltipContentImplElement, TooltipContentImplProps>(\n  (props: ScopedProps<TooltipContentImplProps>, forwardedRef) => {\n    const {\n      __scopeTooltip,\n      children,\n      'aria-label': ariaLabel,\n      portalled = true,\n      ...contentProps\n    } = props;\n    const context = useTooltipContext(CONTENT_NAME, __scopeTooltip);\n    const popperScope = usePopperScope(__scopeTooltip);\n    const PortalWrapper = portalled ? Portal : React.Fragment;\n    const { onClose } = context;\n\n    useEscapeKeydown(() => onClose());\n\n    React.useEffect(() => {\n      // Close this tooltip if another one opens\n      document.addEventListener(TOOLTIP_OPEN, onClose);\n      return () => document.removeEventListener(TOOLTIP_OPEN, onClose);\n    }, [onClose]);\n\n    return (\n      <PortalWrapper>\n        <CheckTriggerMoved __scopeTooltip={__scopeTooltip} />\n        <PopperPrimitive.Content\n          data-state={context.stateAttribute}\n          {...popperScope}\n          {...contentProps}\n          ref={forwardedRef}\n          style={{\n            ...contentProps.style,\n            // re-namespace exposed content custom property\n            ['--radix-tooltip-content-transform-origin' as any]:\n              'var(--radix-popper-transform-origin)',\n          }}\n        >\n          <Slottable>{children}</Slottable>\n          <VisuallyHiddenPrimitive.Root id={context.contentId} role=\"tooltip\">\n            {ariaLabel || children}\n          </VisuallyHiddenPrimitive.Root>\n        </PopperPrimitive.Content>\n      </PortalWrapper>\n    );\n  }\n);\n\nTooltipContent.displayName = CONTENT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * TooltipArrow\n * -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_NAME = 'TooltipArrow';\n\ntype TooltipArrowElement = React.ElementRef<typeof PopperPrimitive.Arrow>;\ntype PopperArrowProps = Radix.ComponentPropsWithoutRef<typeof PopperPrimitive.Arrow>;\ninterface TooltipArrowProps extends PopperArrowProps {}\n\nconst TooltipArrow = React.forwardRef<TooltipArrowElement, TooltipArrowProps>(\n  (props: ScopedProps<TooltipArrowProps>, forwardedRef) => {\n    const { __scopeTooltip, ...arrowProps } = props;\n    const popperScope = usePopperScope(__scopeTooltip);\n    return <PopperPrimitive.Arrow {...popperScope} {...arrowProps} ref={forwardedRef} />;\n  }\n);\n\nTooltipArrow.displayName = ARROW_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction CheckTriggerMoved(props: ScopedProps<{}>) {\n  const { __scopeTooltip } = props;\n  const context = useTooltipContext('CheckTriggerMoved', __scopeTooltip);\n\n  const triggerRect = useRect(context.trigger);\n  const triggerLeft = triggerRect?.left;\n  const previousTriggerLeft = usePrevious(triggerLeft);\n  const triggerTop = triggerRect?.top;\n  const previousTriggerTop = usePrevious(triggerTop);\n  const handleClose = context.onClose;\n\n  React.useEffect(() => {\n    // checking if the user has scrolled…\n    const hasTriggerMoved =\n      (previousTriggerLeft !== undefined && previousTriggerLeft !== triggerLeft) ||\n      (previousTriggerTop !== undefined && previousTriggerTop !== triggerTop);\n\n    if (hasTriggerMoved) {\n      handleClose();\n    }\n  }, [handleClose, previousTriggerLeft, previousTriggerTop, triggerLeft, triggerTop]);\n\n  return null;\n}\n\nconst Provider = TooltipProvider;\nconst Root = Tooltip;\nconst Trigger = TooltipTrigger;\nconst Content = TooltipContent;\nconst Arrow = TooltipArrow;\n\nexport {\n  createTooltipScope,\n  //\n  TooltipProvider,\n  Tooltip,\n  TooltipTrigger,\n  TooltipContent,\n  TooltipArrow,\n  //\n  Provider,\n  Root,\n  Trigger,\n  Content,\n  Arrow,\n};\nexport type { TooltipProps, TooltipTriggerProps, TooltipContentProps, TooltipArrowProps };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}