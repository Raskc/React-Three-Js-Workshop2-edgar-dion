{"ast":null,"code":"export const SIDE_OPTIONS = [\"top\", \"right\", \"bottom\", \"left\"];\nexport const ALIGN_OPTIONS = [\"start\", \"center\", \"end\"];\nexport function getPlacementData(_ref) {\n  let {\n    anchorRect: p,\n    popperSize: c,\n    arrowSize: f,\n    arrowOffset: l = 0,\n    side: d,\n    sideOffset: h = 0,\n    align: x,\n    alignOffset: g = 0,\n    shouldAvoidCollisions: u = !0,\n    collisionBoundariesRect: w,\n    collisionTolerance: m = 0\n  } = _ref;\n  if (!p || !c || !w) return {\n    popperStyles: o,\n    arrowStyles: n\n  };\n  const y = function (e, r) {\n      let o = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      let n = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n      let i = arguments.length > 4 ? arguments[4] : undefined;\n      const p = i ? i.height : 0,\n        a = t(r, e, \"x\"),\n        s = t(r, e, \"y\"),\n        c = s.before - o - p,\n        f = s.after + o + p,\n        l = a.before - o - p,\n        d = a.after + o + p;\n      return {\n        top: {\n          start: {\n            x: a.start + n,\n            y: c\n          },\n          center: {\n            x: a.center,\n            y: c\n          },\n          end: {\n            x: a.end - n,\n            y: c\n          }\n        },\n        right: {\n          start: {\n            x: d,\n            y: s.start + n\n          },\n          center: {\n            x: d,\n            y: s.center\n          },\n          end: {\n            x: d,\n            y: s.end - n\n          }\n        },\n        bottom: {\n          start: {\n            x: a.start + n,\n            y: f\n          },\n          center: {\n            x: a.center,\n            y: f\n          },\n          end: {\n            x: a.end - n,\n            y: f\n          }\n        },\n        left: {\n          start: {\n            x: l,\n            y: s.start + n\n          },\n          center: {\n            x: l,\n            y: s.center\n          },\n          end: {\n            x: l,\n            y: s.end - n\n          }\n        }\n      };\n    }(c, p, h, g, f),\n    b = y[d][x];\n  if (!1 === u) {\n    const t = e(b);\n    let o = n;\n    f && (o = i({\n      popperSize: c,\n      arrowSize: f,\n      arrowOffset: l,\n      side: d,\n      align: x\n    }));\n    return {\n      popperStyles: {\n        ...t,\n        \"--radix-popper-transform-origin\": r(c, d, x, l, f)\n      },\n      arrowStyles: o,\n      placedSide: d,\n      placedAlign: x\n    };\n  }\n  const S = DOMRect.fromRect({\n      ...c,\n      ...b\n    }),\n    $ = (O = w, z = m, DOMRect.fromRect({\n      width: O.width - 2 * z,\n      height: O.height - 2 * z,\n      x: O.left + z,\n      y: O.top + z\n    }));\n  var O, z;\n  const R = s(S, $),\n    M = y[a(d)][x],\n    D = function (t, e, r) {\n      const o = a(t);\n      return e[t] && !r[o] ? o : t;\n    }(d, R, s(DOMRect.fromRect({\n      ...c,\n      ...M\n    }), $)),\n    A = function (t, e, r, o, n) {\n      const i = \"top\" === r || \"bottom\" === r,\n        p = i ? \"left\" : \"top\",\n        a = i ? \"right\" : \"bottom\",\n        s = i ? \"width\" : \"height\",\n        c = e[s] > t[s];\n      if ((\"start\" === o || \"center\" === o) && (n[p] && c || n[a] && !c)) return \"end\";\n      if ((\"end\" === o || \"center\" === o) && (n[a] && c || n[p] && !c)) return \"start\";\n      return o;\n    }(c, p, d, x, R),\n    I = e(y[D][A]);\n  let C = n;\n  f && (C = i({\n    popperSize: c,\n    arrowSize: f,\n    arrowOffset: l,\n    side: D,\n    align: A\n  }));\n  return {\n    popperStyles: {\n      ...I,\n      \"--radix-popper-transform-origin\": r(c, D, A, l, f)\n    },\n    arrowStyles: C,\n    placedSide: D,\n    placedAlign: A\n  };\n}\nfunction t(t, e, r) {\n  const o = t[\"x\" === r ? \"left\" : \"top\"],\n    n = \"x\" === r ? \"width\" : \"height\",\n    i = t[n],\n    p = e[n];\n  return {\n    before: o - p,\n    start: o,\n    center: o + (i - p) / 2,\n    end: o + i - p,\n    after: o + i\n  };\n}\nfunction e(t) {\n  return {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    minWidth: \"max-content\",\n    willChange: \"transform\",\n    transform: `translate3d(${Math.round(t.x + window.scrollX)}px, ${Math.round(t.y + window.scrollY)}px, 0)`\n  };\n}\nfunction r(t, e, r, o, n) {\n  const i = \"top\" === e || \"bottom\" === e,\n    p = n ? n.width : 0,\n    a = n ? n.height : 0,\n    s = p / 2 + o;\n  let c = \"\",\n    f = \"\";\n  return i ? (c = {\n    start: `${s}px`,\n    center: \"center\",\n    end: t.width - s + \"px\"\n  }[r], f = \"top\" === e ? `${t.height + a}px` : -a + \"px\") : (c = \"left\" === e ? `${t.width + a}px` : -a + \"px\", f = {\n    start: `${s}px`,\n    center: \"center\",\n    end: t.height - s + \"px\"\n  }[r]), `${c} ${f}`;\n}\nconst o = {\n    position: \"fixed\",\n    top: 0,\n    left: 0,\n    opacity: 0,\n    transform: \"translate3d(0, -200%, 0)\"\n  },\n  n = {\n    position: \"absolute\",\n    opacity: 0\n  };\nfunction i(_ref2) {\n  let {\n    popperSize: t,\n    arrowSize: e,\n    arrowOffset: r,\n    side: o,\n    align: n\n  } = _ref2;\n  const i = (t.width - e.width) / 2,\n    a = (t.height - e.width) / 2,\n    s = {\n      top: 0,\n      right: 90,\n      bottom: 180,\n      left: -90\n    }[o],\n    c = Math.max(e.width, e.height),\n    f = {\n      width: `${c}px`,\n      height: `${c}px`,\n      transform: `rotate(${s}deg)`,\n      willChange: \"transform\",\n      position: \"absolute\",\n      [o]: \"100%\",\n      direction: p(o, n)\n    };\n  return \"top\" !== o && \"bottom\" !== o || (\"start\" === n && (f.left = `${r}px`), \"center\" === n && (f.left = `${i}px`), \"end\" === n && (f.right = `${r}px`)), \"left\" !== o && \"right\" !== o || (\"start\" === n && (f.top = `${r}px`), \"center\" === n && (f.top = `${a}px`), \"end\" === n && (f.bottom = `${r}px`)), f;\n}\nfunction p(t, e) {\n  return (\"top\" !== t && \"right\" !== t || \"end\" !== e) && (\"bottom\" !== t && \"left\" !== t || \"end\" === e) ? \"ltr\" : \"rtl\";\n}\nfunction a(t) {\n  return {\n    top: \"bottom\",\n    right: \"left\",\n    bottom: \"top\",\n    left: \"right\"\n  }[t];\n}\nfunction s(t, e) {\n  return {\n    top: t.top < e.top,\n    right: t.right > e.right,\n    bottom: t.bottom > e.bottom,\n    left: t.left < e.left\n  };\n}","map":{"version":3,"names":["SIDE_OPTIONS","ALIGN_OPTIONS","getPlacementData","_ref","anchorRect","p","popperSize","c","arrowSize","f","arrowOffset","l","side","d","sideOffset","h","align","x","alignOffset","g","shouldAvoidCollisions","u","collisionBoundariesRect","w","collisionTolerance","m","popperStyles","o","arrowStyles","n","y","e","r","arguments","length","undefined","i","height","a","t","s","before","after","top","start","center","end","right","bottom","left","b","placedSide","placedAlign","S","DOMRect","fromRect","$","O","z","width","R","M","D","A","I","C","position","minWidth","willChange","transform","Math","round","window","scrollX","scrollY","opacity","_ref2","max","direction"],"sources":["/home/edgar/Documents/Epitech/Tek2/Projects/React-Three-Js-Workshop2-edgar-dion/Workshop 2/node_modules/@radix-ui/popper/dist/packages/core/popper/src/popper.ts"],"sourcesContent":["import * as CSS from 'csstype';\n\nconst SIDE_OPTIONS = ['top', 'right', 'bottom', 'left'] as const;\nconst ALIGN_OPTIONS = ['start', 'center', 'end'] as const;\n\ntype Axis = 'x' | 'y';\ntype Side = typeof SIDE_OPTIONS[number];\ntype Align = typeof ALIGN_OPTIONS[number];\ntype Point = { x: number; y: number };\ntype Size = { width: number; height: number };\n\ntype GetPlacementDataOptions = {\n  /** The rect of the anchor we are placing around */\n  anchorRect?: ClientRect;\n  /** The size of the popper to place */\n  popperSize?: Size;\n  /** An optional arrow size */\n  arrowSize?: Size;\n  /** An optional arrow offset (along the side, default: 0) */\n  arrowOffset?: number;\n  /** The desired side */\n  side: Side;\n  /** An optional side offset (distance from the side, default: 0)  */\n  sideOffset?: number;\n  /** The desired alignment */\n  align: Align;\n  /** An optional alignment offset (distance along the side, default: 0) */\n  alignOffset?: number;\n  /** An option to turn on/off the collision handling (default: true) */\n  shouldAvoidCollisions?: boolean;\n  /** The rect which represents the boundaries for collision checks */\n  collisionBoundariesRect?: ClientRect;\n  /** The tolerance used for collisions, ie. if we want them to trigger a bit earlier (default: 0) */\n  collisionTolerance?: number;\n};\n\ntype PlacementData = {\n  popperStyles: CSS.Properties;\n  arrowStyles: CSS.Properties;\n  placedSide?: Side;\n  placedAlign?: Align;\n};\n\n/**\n * Given all the information necessary to compute it,\n * this function calculates all the necessary placement data.\n *\n * It will return:\n *\n * - the styles to apply to the popper (including a custom property that is useful to set the transform origin in the right place)\n * - the styles to apply to the arrow\n * - the placed side (because it might have changed because of collisions)\n * - the placed align (because it might have changed because of collisions)\n */\nfunction getPlacementData({\n  anchorRect,\n  popperSize,\n  arrowSize,\n  arrowOffset = 0,\n  side,\n  sideOffset = 0,\n  align,\n  alignOffset = 0,\n  shouldAvoidCollisions = true,\n  collisionBoundariesRect,\n  collisionTolerance = 0,\n}: GetPlacementDataOptions): PlacementData {\n  // if we're not ready to do all the measurements yet,\n  // we return some good default styles\n  if (!anchorRect || !popperSize || !collisionBoundariesRect) {\n    return {\n      popperStyles: UNMEASURED_POPPER_STYLES,\n      arrowStyles: UNMEASURED_ARROW_STYLES,\n    };\n  }\n\n  // pre-compute points for all potential placements\n  const allPlacementPoints = getAllPlacementPoints(\n    popperSize,\n    anchorRect,\n    sideOffset,\n    alignOffset,\n    arrowSize\n  );\n\n  // get point based on side / align\n  const popperPoint = allPlacementPoints[side][align];\n\n  // if we don't need to avoid collisions, we can stop here\n  if (shouldAvoidCollisions === false) {\n    const popperStyles = getPlacementStylesForPoint(popperPoint);\n\n    let arrowStyles = UNMEASURED_ARROW_STYLES;\n    if (arrowSize) {\n      arrowStyles = getPopperArrowStyles({ popperSize, arrowSize, arrowOffset, side, align });\n    }\n\n    const transformOrigin = getTransformOrigin(popperSize, side, align, arrowOffset, arrowSize);\n\n    return {\n      popperStyles: {\n        ...popperStyles,\n        ['--radix-popper-transform-origin' as any]: transformOrigin,\n      },\n      arrowStyles,\n      placedSide: side,\n      placedAlign: align,\n    };\n  }\n\n  // create a new rect as if element had been moved to new placement\n  const popperRect = DOMRect.fromRect({ ...popperSize, ...popperPoint });\n\n  // create a new rect representing the collision boundaries but taking into account any added tolerance\n  const collisionBoundariesRectWithTolerance = getContractedRect(\n    collisionBoundariesRect,\n    collisionTolerance\n  );\n\n  // check for any collisions in new placement\n  const popperCollisions = getCollisions(popperRect, collisionBoundariesRectWithTolerance);\n\n  // do all the same calculations for the opposite side\n  // this is because we need to check for potential collisions if we were to swap side\n  const oppositeSide = getOppositeSide(side);\n  const oppositeSidePopperPoint = allPlacementPoints[oppositeSide][align];\n  const updatedOppositeSidePopperPoint = DOMRect.fromRect({\n    ...popperSize,\n    ...oppositeSidePopperPoint,\n  });\n  const oppositeSidePopperCollisions = getCollisions(\n    updatedOppositeSidePopperPoint,\n    collisionBoundariesRectWithTolerance\n  );\n\n  // adjust side accounting for collisions / opposite side collisions\n  const placedSide = getSideAccountingForCollisions(\n    side,\n    popperCollisions,\n    oppositeSidePopperCollisions\n  );\n\n  // adjust alignnment accounting for collisions\n  const placedAlign = getAlignAccountingForCollisions(\n    popperSize,\n    anchorRect,\n    side,\n    align,\n    popperCollisions\n  );\n\n  const placedPopperPoint = allPlacementPoints[placedSide][placedAlign];\n\n  // compute adjusted popper / arrow styles\n  const popperStyles = getPlacementStylesForPoint(placedPopperPoint);\n\n  let arrowStyles = UNMEASURED_ARROW_STYLES;\n  if (arrowSize) {\n    arrowStyles = getPopperArrowStyles({\n      popperSize,\n      arrowSize,\n      arrowOffset,\n      side: placedSide,\n      align: placedAlign,\n    });\n  }\n\n  const transformOrigin = getTransformOrigin(\n    popperSize,\n    placedSide,\n    placedAlign,\n    arrowOffset,\n    arrowSize\n  );\n\n  return {\n    popperStyles: {\n      ...popperStyles,\n      ['--radix-popper-transform-origin' as any]: transformOrigin,\n    },\n    arrowStyles,\n    placedSide,\n    placedAlign,\n  };\n}\n\ntype AllPlacementPoints = Record<Side, Record<Align, Point>>;\n\nfunction getAllPlacementPoints(\n  popperSize: Size,\n  anchorRect: ClientRect,\n  sideOffset: number = 0,\n  alignOffset: number = 0,\n  arrowSize?: Size\n): AllPlacementPoints {\n  const arrowBaseToTipLength = arrowSize ? arrowSize.height : 0;\n\n  const x = getPopperSlotsForAxis(anchorRect, popperSize, 'x');\n  const y = getPopperSlotsForAxis(anchorRect, popperSize, 'y');\n\n  const topY    = y.before - sideOffset - arrowBaseToTipLength; // prettier-ignore\n  const bottomY = y.after  + sideOffset + arrowBaseToTipLength; // prettier-ignore\n  const leftX   = x.before - sideOffset - arrowBaseToTipLength; // prettier-ignore\n  const rightX  = x.after  + sideOffset + arrowBaseToTipLength; // prettier-ignore\n\n  // prettier-ignore\n  const map: AllPlacementPoints = {\n    top: {\n      start:  { x: x.start + alignOffset, y: topY },\n      center: { x: x.center,              y: topY },\n      end:    { x: x.end - alignOffset,   y: topY },\n    },\n    right: {\n      start:  { x: rightX, y: y.start + alignOffset },\n      center: { x: rightX, y: y.center },\n      end:    { x: rightX, y: y.end - alignOffset },\n    },\n    bottom: {\n      start:  { x: x.start + alignOffset, y: bottomY },\n      center: { x: x.center,              y: bottomY },\n      end:    { x: x.end - alignOffset,   y: bottomY },\n    },\n    left: {\n      start:  { x: leftX, y: y.start + alignOffset },\n      center: { x: leftX, y: y.center },\n      end:    { x: leftX, y: y.end - alignOffset },\n    },\n  };\n\n  return map;\n}\n\nfunction getPopperSlotsForAxis(anchorRect: ClientRect, popperSize: Size, axis: Axis) {\n  const startSide = axis === 'x' ? 'left' : 'top';\n  const anchorStart = anchorRect[startSide];\n\n  const dimension = axis === 'x' ? 'width' : 'height';\n  const anchorDimension = anchorRect[dimension];\n  const popperDimension = popperSize[dimension];\n\n  // prettier-ignore\n  return {\n    before: anchorStart - popperDimension,\n    start:  anchorStart,\n    center: anchorStart + (anchorDimension - popperDimension) / 2,\n    end:    anchorStart + anchorDimension - popperDimension,\n    after:  anchorStart + anchorDimension,\n  };\n}\n\n/**\n * Gets an adjusted side based on collision information\n */\nfunction getSideAccountingForCollisions(\n  /** The side we want to ideally position to */\n  side: Side,\n  /** The collisions for this given side */\n  collisions: Collisions,\n  /** The collisions for the opposite side (if we were to swap side) */\n  oppositeSideCollisions: Collisions\n): Side {\n  const oppositeSide = getOppositeSide(side);\n  // in order to prevent premature jumps\n  // we only swap side if there's enough space to fit on the opposite side\n  return collisions[side] && !oppositeSideCollisions[oppositeSide] ? oppositeSide : side;\n}\n\n/**\n * Gets an adjusted alignment based on collision information\n */\nfunction getAlignAccountingForCollisions(\n  /** The size of the popper to place */\n  popperSize: Size,\n  /** The size of the anchor we are placing around */\n  anchorSize: Size,\n  /** The final side */\n  side: Side,\n  /** The desired align */\n  align: Align,\n  /** The collisions */\n  collisions: Collisions\n): Align {\n  const isHorizontalSide = side === 'top' || side === 'bottom';\n  const startBound = isHorizontalSide ? 'left' : 'top';\n  const endBound = isHorizontalSide ? 'right' : 'bottom';\n  const dimension = isHorizontalSide ? 'width' : 'height';\n  const isAnchorBigger = anchorSize[dimension] > popperSize[dimension];\n\n  if (align === 'start' || align === 'center') {\n    if ((collisions[startBound] && isAnchorBigger) || (collisions[endBound] && !isAnchorBigger)) {\n      return 'end';\n    }\n  }\n\n  if (align === 'end' || align === 'center') {\n    if ((collisions[endBound] && isAnchorBigger) || (collisions[startBound] && !isAnchorBigger)) {\n      return 'start';\n    }\n  }\n\n  return align;\n}\n\nfunction getPlacementStylesForPoint(point: Point): CSS.Properties {\n  const x = Math.round(point.x + window.scrollX);\n  const y = Math.round(point.y + window.scrollY);\n  return {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    minWidth: 'max-content',\n    willChange: 'transform',\n    transform: `translate3d(${x}px, ${y}px, 0)`,\n  };\n}\n\nfunction getTransformOrigin(\n  popperSize: Size,\n  side: Side,\n  align: Align,\n  arrowOffset: number,\n  arrowSize?: Size\n): CSS.Properties['transformOrigin'] {\n  const isHorizontalSide = side === 'top' || side === 'bottom';\n\n  const arrowBaseLength = arrowSize ? arrowSize.width : 0;\n  const arrowBaseToTipLength = arrowSize ? arrowSize.height : 0;\n  const sideOffset = arrowBaseToTipLength;\n  const alignOffset = arrowBaseLength / 2 + arrowOffset;\n\n  let x = '';\n  let y = '';\n\n  if (isHorizontalSide) {\n    x = {\n      start: `${alignOffset}px`,\n      center: 'center',\n      end: `${popperSize.width - alignOffset}px`,\n    }[align];\n\n    y = side === 'top' ? `${popperSize.height + sideOffset}px` : `${-sideOffset}px`;\n  } else {\n    x = side === 'left' ? `${popperSize.width + sideOffset}px` : `${-sideOffset}px`;\n\n    y = {\n      start: `${alignOffset}px`,\n      center: 'center',\n      end: `${popperSize.height - alignOffset}px`,\n    }[align];\n  }\n\n  return `${x} ${y}`;\n}\n\nconst UNMEASURED_POPPER_STYLES: CSS.Properties = {\n  // position: 'fixed' here is important because it will take the popper\n  // out of the flow so it does not disturb the position of the anchor\n  position: 'fixed',\n  top: 0,\n  left: 0,\n  opacity: 0,\n  transform: 'translate3d(0, -200%, 0)',\n};\n\nconst UNMEASURED_ARROW_STYLES: CSS.Properties = {\n  // given the arrow is nested inside the popper,\n  // make sure that it is out of the flow and doesn't hinder then popper's measurement\n  position: 'absolute',\n  opacity: 0,\n};\n\ntype GetArrowStylesOptions = {\n  /** The size of the popper to place */\n  popperSize: Size;\n  /** The size of the arrow itself */\n  arrowSize: Size;\n  /** An offset for the arrow along the align axis */\n  arrowOffset: number;\n  /** The side where the arrow points to */\n  side: Side;\n  /** The alignment of the arrow along the side */\n  align: Align;\n};\n\n/**\n * Computes the styles necessary to position, rotate and align the arrow correctly.\n * It can adjust itself based on anchor/popper size, side/align and an optional offset.\n */\nfunction getPopperArrowStyles({\n  popperSize,\n  arrowSize,\n  arrowOffset,\n  side,\n  align,\n}: GetArrowStylesOptions): CSS.Properties {\n  const popperCenterX = (popperSize.width - arrowSize.width) / 2;\n  const popperCenterY = (popperSize.height - arrowSize.width) / 2;\n\n  const rotationMap = { top: 0, right: 90, bottom: 180, left: -90 };\n  const rotation = rotationMap[side];\n  const arrowMaxDimension = Math.max(arrowSize.width, arrowSize.height);\n\n  const styles: CSS.Properties = {\n    // we make sure we put the arrow inside a 1:1 ratio container\n    // this is to make the rotation handling simpler\n    // as we do no need to worry about changing the transform-origin\n    width: `${arrowMaxDimension}px`,\n    height: `${arrowMaxDimension}px`,\n\n    // rotate the arrow appropriately\n    transform: `rotate(${rotation}deg)`,\n    willChange: 'transform',\n\n    // position the arrow appropriately\n    position: 'absolute',\n    [side]: '100%',\n\n    // Because the arrow gets rotated (see `transform above`)\n    // and we are putting it inside a 1:1 ratio container\n    // we need to adjust the CSS direction from `ltr` to `rtl`\n    // in some circumstances\n    direction: getArrowCssDirection(side, align),\n  };\n\n  if (side === 'top' || side === 'bottom') {\n    if (align === 'start') {\n      styles.left = `${arrowOffset}px`;\n    }\n    if (align === 'center') {\n      styles.left = `${popperCenterX}px`;\n    }\n    if (align === 'end') {\n      styles.right = `${arrowOffset}px`;\n    }\n  }\n\n  if (side === 'left' || side === 'right') {\n    if (align === 'start') {\n      styles.top = `${arrowOffset}px`;\n    }\n    if (align === 'center') {\n      styles.top = `${popperCenterY}px`;\n    }\n    if (align === 'end') {\n      styles.bottom = `${arrowOffset}px`;\n    }\n  }\n\n  return styles;\n}\n\n/**\n * Adjusts the arrow's CSS direction (`ltr` / `rtl`)\n */\nfunction getArrowCssDirection(side: Side, align: Align): CSS.Property.Direction {\n  if ((side === 'top' || side === 'right') && align === 'end') {\n    return 'rtl';\n  }\n\n  if ((side === 'bottom' || side === 'left') && align !== 'end') {\n    return 'rtl';\n  }\n\n  return 'ltr';\n}\n\n/**\n * Gets the opposite side of a given side (ie. top => bottom, left => right, …)\n */\nfunction getOppositeSide(side: Side): Side {\n  const oppositeSides: Record<Side, Side> = {\n    top: 'bottom',\n    right: 'left',\n    bottom: 'top',\n    left: 'right',\n  };\n  return oppositeSides[side];\n}\n\n/**\n * Creates a new rect (`ClientRect`) based on a given one but contracted by\n * a given amout on each side.\n */\nfunction getContractedRect(rect: ClientRect, amount: number) {\n  return DOMRect.fromRect({\n    width: rect.width - amount * 2,\n    height: rect.height - amount * 2,\n    x: rect.left + amount,\n    y: rect.top + amount,\n  });\n}\n\n/**\n * Gets collisions for each side of a rect (top, right, bottom, left)\n */\nfunction getCollisions(\n  /** The rect to test collisions against */\n  rect: ClientRect,\n  /** The rect which represents the boundaries for collision checks */\n  collisionBoundariesRect: ClientRect\n) {\n  return {\n    top: rect.top < collisionBoundariesRect.top,\n    right: rect.right > collisionBoundariesRect.right,\n    bottom: rect.bottom > collisionBoundariesRect.bottom,\n    left: rect.left < collisionBoundariesRect.left,\n  };\n}\n\ntype Collisions = ReturnType<typeof getCollisions>;\n\nexport { getPlacementData, SIDE_OPTIONS, ALIGN_OPTIONS };\nexport type { Side, Align };\n"],"mappings":"OAEA,MAAMA,YAAA,GAAe,CAAC,OAAO,SAAS,UAAU;AAAA,OAChD,MAAMC,aAAA,GAAgB,CAAC,SAAS,UAAU;AAAA,OAmD1C,SAASC,iBAAAC,IAAA,EAWc;EAAA,IAXd;IAAiBC,UAAA,EACxBC,CAAA;IADwBC,UAAA,EAExBC,CAAA;IAFwBC,SAAA,EAGxBC,CAAA;IAHwBC,WAAA,EAIxBC,CAAA,GAAc;IAJUC,IAAA,EAKxBC,CAAA;IALwBC,UAAA,EAMxBC,CAAA,GAAa;IANWC,KAAA,EAOxBC,CAAA;IAPwBC,WAAA,EAQxBC,CAAA,GAAc;IARUC,qBAAA,EASxBC,CAAA,IAAwB;IATAC,uBAAA,EAUxBC,CAAA;IAVwBC,kBAAA,EAWxBC,CAAA,GAAqB;EAAA,IAAAtB,IAAA;EAIrB,KAAKE,CAAA,KAAeE,CAAA,KAAegB,CAAA,EACjC,OAAO;IACLG,YAAA,EAAcC,CAAA;IACdC,WAAA,EAAaC;EAAA;EAKjB,MAAMC,CAAA,GA+GR,UACEC,CAAA,EACAC,CAAA,EAGA;MAAA,IAFAL,CAAA,GAAAM,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAqB;MAAA,IACrBJ,CAAA,GAAAI,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAsB;MAAA,IACtBG,CAAA,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;MAEA,MAAM9B,CAAA,GAAuB+B,CAAA,GAAYA,CAAA,CAAUC,MAAA,GAAS;QAEtDC,CAAA,GAAIC,CAAA,CAAsBP,CAAA,EAAYD,CAAA,EAAY;QAClDS,CAAA,GAAID,CAAA,CAAsBP,CAAA,EAAYD,CAAA,EAAY;QAElDxB,CAAA,GAAUiC,CAAA,CAAEC,MAAA,GAASd,CAAA,GAAatB,CAAA;QAClCI,CAAA,GAAU+B,CAAA,CAAEE,KAAA,GAASf,CAAA,GAAatB,CAAA;QAClCM,CAAA,GAAU2B,CAAA,CAAEG,MAAA,GAASd,CAAA,GAAatB,CAAA;QAClCQ,CAAA,GAAUyB,CAAA,CAAEI,KAAA,GAASf,CAAA,GAAatB,CAAA;MA0BxC,OAvBgC;QAC9BsC,GAAA,EAAK;UACHC,KAAA,EAAQ;YAAE3B,CAAA,EAAGqB,CAAA,CAAEM,KAAA,GAAQf,CAAA;YAAaC,CAAA,EAAGvB;UAAA;UACvCsC,MAAA,EAAQ;YAAE5B,CAAA,EAAGqB,CAAA,CAAEO,MAAA;YAAqBf,CAAA,EAAGvB;UAAA;UACvCuC,GAAA,EAAQ;YAAE7B,CAAA,EAAGqB,CAAA,CAAEQ,GAAA,GAAMjB,CAAA;YAAeC,CAAA,EAAGvB;UAAA;QAAA;QAEzCwC,KAAA,EAAO;UACLH,KAAA,EAAQ;YAAE3B,CAAA,EAAGJ,CAAA;YAAQiB,CAAA,EAAGU,CAAA,CAAEI,KAAA,GAAQf;UAAA;UAClCgB,MAAA,EAAQ;YAAE5B,CAAA,EAAGJ,CAAA;YAAQiB,CAAA,EAAGU,CAAA,CAAEK;UAAA;UAC1BC,GAAA,EAAQ;YAAE7B,CAAA,EAAGJ,CAAA;YAAQiB,CAAA,EAAGU,CAAA,CAAEM,GAAA,GAAMjB;UAAA;QAAA;QAElCmB,MAAA,EAAQ;UACNJ,KAAA,EAAQ;YAAE3B,CAAA,EAAGqB,CAAA,CAAEM,KAAA,GAAQf,CAAA;YAAaC,CAAA,EAAGrB;UAAA;UACvCoC,MAAA,EAAQ;YAAE5B,CAAA,EAAGqB,CAAA,CAAEO,MAAA;YAAqBf,CAAA,EAAGrB;UAAA;UACvCqC,GAAA,EAAQ;YAAE7B,CAAA,EAAGqB,CAAA,CAAEQ,GAAA,GAAMjB,CAAA;YAAeC,CAAA,EAAGrB;UAAA;QAAA;QAEzCwC,IAAA,EAAM;UACJL,KAAA,EAAQ;YAAE3B,CAAA,EAAGN,CAAA;YAAOmB,CAAA,EAAGU,CAAA,CAAEI,KAAA,GAAQf;UAAA;UACjCgB,MAAA,EAAQ;YAAE5B,CAAA,EAAGN,CAAA;YAAOmB,CAAA,EAAGU,CAAA,CAAEK;UAAA;UACzBC,GAAA,EAAQ;YAAE7B,CAAA,EAAGN,CAAA;YAAOmB,CAAA,EAAGU,CAAA,CAAEM,GAAA,GAAMjB;UAAA;QAAA;MAAA;IAAA,CApJR,CACzBtB,CAAA,EACAF,CAAA,EACAU,CAAA,EACAI,CAAA,EACAV,CAAA;IAIIyC,CAAA,GAAcpB,CAAA,CAAmBjB,CAAA,EAAMI,CAAA;EAG7C,KAA8B,MAA1BI,CAAA,EAAiC;IACnC,MAAMkB,CAAA,GAAeR,CAAA,CAA2BmB,CAAA;IAEhD,IAAIvB,CAAA,GAAcE,CAAA;IACdpB,CAAA,KACFkB,CAAA,GAAcS,CAAA,CAAqB;MAAE9B,UAAA,EAAAC,CAAA;MAAYC,SAAA,EAAAC,CAAA;MAAWC,WAAA,EAAAC,CAAA;MAAaC,IAAA,EAAAC,CAAA;MAAMG,KAAA,EAAAC;IAAA;IAKjF,OAAO;MACLS,YAAA,EAAc;QAAA,GACTa,CAAA;QACH,mCALoBP,CAAA,CAAmBzB,CAAA,EAAYM,CAAA,EAAMI,CAAA,EAAON,CAAA,EAAaF,CAAA;MAAA;MAO/EmB,WAAA,EAAAD,CAAA;MACAwB,UAAA,EAAYtC,CAAA;MACZuC,WAAA,EAAanC;IAAA;EAAA;EAKjB,MAAMoC,CAAA,GAAaC,OAAA,CAAQC,QAAA,CAAS;MAAA,GAAKhD,CAAA;MAAA,GAAe2C;IAAA;IAGlDM,CAAA,IAiXmBC,CAAA,GAhXvBlC,CAAA,EAgXyCmC,CAAA,GA/WzCjC,CAAA,EAgXK6B,OAAA,CAAQC,QAAA,CAAS;MACtBI,KAAA,EAAOF,CAAA,CAAKE,KAAA,GAAiB,IAATD,CAAA;MACpBrB,MAAA,EAAQoB,CAAA,CAAKpB,MAAA,GAAkB,IAATqB,CAAA;MACtBzC,CAAA,EAAGwC,CAAA,CAAKR,IAAA,GAAOS,CAAA;MACf5B,CAAA,EAAG2B,CAAA,CAAKd,GAAA,GAAMe;IAAA;EALlB,IAA2BD,CAAA,EAAkBC,CAAA;EA3W3C,MAAME,CAAA,GAAmBpB,CAAA,CAAca,CAAA,EAAYG,CAAA;IAK7CK,CAAA,GAA0B/B,CAAA,CADXQ,CAAA,CAAgBzB,CAAA,GAC4BI,CAAA;IAW3D6C,CAAA,GAqHR,UAEEvB,CAAA,EAEAR,CAAA,EAEAC,CAAA;MAEA,MAAML,CAAA,GAAeW,CAAA,CAAgBC,CAAA;MAGrC,OAAOR,CAAA,CAAWQ,CAAA,MAAUP,CAAA,CAAuBL,CAAA,IAAgBA,CAAA,GAAeY,CAAA;IAAA,CAhI/D,CACjB1B,CAAA,EACA+C,CAAA,EARmCpB,CAAA,CAJEc,OAAA,CAAQC,QAAA,CAAS;MAAA,GACnDhD,CAAA;MAAA,GACAsD;IAAA,IAIHL,CAAA;IAWIO,CAAA,GA+HR,UAEExB,CAAA,EAEAR,CAAA,EAEAC,CAAA,EAEAL,CAAA,EAEAE,CAAA;MAEA,MAAMO,CAAA,GAA4B,UAATJ,CAAA,IAA2B,aAATA,CAAA;QACrC3B,CAAA,GAAa+B,CAAA,GAAmB,SAAS;QACzCE,CAAA,GAAWF,CAAA,GAAmB,UAAU;QACxCI,CAAA,GAAYJ,CAAA,GAAmB,UAAU;QACzC7B,CAAA,GAAiBwB,CAAA,CAAWS,CAAA,IAAaD,CAAA,CAAWC,CAAA;MAE1D,KAAc,YAAVb,CAAA,IAA+B,aAAVA,CAAA,MAClBE,CAAA,CAAWxB,CAAA,KAAeE,CAAA,IAAoBsB,CAAA,CAAWS,CAAA,MAAc/B,CAAA,GAC1E,OAAO;MAIX,KAAc,UAAVoB,CAAA,IAA6B,aAAVA,CAAA,MAChBE,CAAA,CAAWS,CAAA,KAAa/B,CAAA,IAAoBsB,CAAA,CAAWxB,CAAA,MAAgBE,CAAA,GAC1E,OAAO;MAIX,OAAOoB,CAAA;IAAA,CA7Ja,CAClBpB,CAAA,EACAF,CAAA,EACAQ,CAAA,EACAI,CAAA,EACA2C,CAAA;IAMII,CAAA,GAAejC,CAAA,CAHKD,CAAA,CAAmBgC,CAAA,EAAYC,CAAA;EAKzD,IAAIE,CAAA,GAAcpC,CAAA;EACdpB,CAAA,KACFwD,CAAA,GAAc7B,CAAA,CAAqB;IACjC9B,UAAA,EAAAC,CAAA;IACAC,SAAA,EAAAC,CAAA;IACAC,WAAA,EAAAC,CAAA;IACAC,IAAA,EAAMkD,CAAA;IACN9C,KAAA,EAAO+C;EAAA;EAYX,OAAO;IACLrC,YAAA,EAAc;MAAA,GACTsC,CAAA;MACH,mCAXoBhC,CAAA,CACtBzB,CAAA,EACAuD,CAAA,EACAC,CAAA,EACApD,CAAA,EACAF,CAAA;IAAA;IAQAmB,WAAA,EAAAqC,CAAA;IACAd,UAAA,EAAAW,CAAA;IACAV,WAAA,EAAAW;EAAA;AAAA;AAkDJ,SAASxB,EAAsBA,CAAA,EAAwBR,CAAA,EAAkBC,CAAA;EACvE,MACML,CAAA,GAAcY,CAAA,CADO,QAATP,CAAA,GAAe,SAAS;IAGpCH,CAAA,GAAqB,QAATG,CAAA,GAAe,UAAU;IACrCI,CAAA,GAAkBG,CAAA,CAAWV,CAAA;IAC7BxB,CAAA,GAAkB0B,CAAA,CAAWF,CAAA;EAGnC,OAAO;IACLY,MAAA,EAAQd,CAAA,GAActB,CAAA;IACtBuC,KAAA,EAAQjB,CAAA;IACRkB,MAAA,EAAQlB,CAAA,IAAeS,CAAA,GAAkB/B,CAAA,IAAmB;IAC5DyC,GAAA,EAAQnB,CAAA,GAAcS,CAAA,GAAkB/B,CAAA;IACxCqC,KAAA,EAAQf,CAAA,GAAcS;EAAA;AAAA;AAyD1B,SAASL,EAA2BQ,CAAA;EAGlC,OAAO;IACL2B,QAAA,EAAU;IACVvB,GAAA,EAAK;IACLM,IAAA,EAAM;IACNkB,QAAA,EAAU;IACVC,UAAA,EAAY;IACZC,SAAA,EAAY,eARJC,IAAA,CAAKC,KAAA,CAAMhC,CAAA,CAAMtB,CAAA,GAAIuD,MAAA,CAAOC,OAAA,QAC5BH,IAAA,CAAKC,KAAA,CAAMhC,CAAA,CAAMT,CAAA,GAAI0C,MAAA,CAAOE,OAAA;EAAA;AAAA;AAWxC,SAAS1C,EACPO,CAAA,EACAR,CAAA,EACAC,CAAA,EACAL,CAAA,EACAE,CAAA;EAEA,MAAMO,CAAA,GAA4B,UAATL,CAAA,IAA2B,aAATA,CAAA;IAErC1B,CAAA,GAAkBwB,CAAA,GAAYA,CAAA,CAAU8B,KAAA,GAAQ;IAEhDrB,CAAA,GADuBT,CAAA,GAAYA,CAAA,CAAUQ,MAAA,GAAS;IAEtDG,CAAA,GAAcnC,CAAA,GAAkB,IAAIsB,CAAA;EAE1C,IAAIpB,CAAA,GAAI;IACJE,CAAA,GAAI;EAoBR,OAlBI2B,CAAA,IACF7B,CAAA,GAAI;IACFqC,KAAA,EAAQ,GAAEJ,CAAA;IACVK,MAAA,EAAQ;IACRC,GAAA,EAAQP,CAAA,CAAWoB,KAAA,GAAQnB,CAAA,GAArB;EAAA,EACNR,CAAA,GAEFvB,CAAA,GAAa,UAATsB,CAAA,GAAkB,GAAEQ,CAAA,CAAWF,MAAA,GAASC,CAAA,QAAqBA,CAAA,GAAH,SAE9D/B,CAAA,GAAa,WAATwB,CAAA,GAAmB,GAAEQ,CAAA,CAAWoB,KAAA,GAAQrB,CAAA,QAAqBA,CAAA,GAAH,MAE9D7B,CAAA,GAAI;IACFmC,KAAA,EAAQ,GAAEJ,CAAA;IACVK,MAAA,EAAQ;IACRC,GAAA,EAAQP,CAAA,CAAWF,MAAA,GAASG,CAAA,GAAtB;EAAA,EACNR,CAAA,IAGI,GAAEzB,CAAA,IAAKE,CAAA;AAAA;AAGjB,MAAMkB,CAAA,GAA2C;IAG/CuC,QAAA,EAAU;IACVvB,GAAA,EAAK;IACLM,IAAA,EAAM;IACN0B,OAAA,EAAS;IACTN,SAAA,EAAW;EAAA;EAGPxC,CAAA,GAA0C;IAG9CqC,QAAA,EAAU;IACVS,OAAA,EAAS;EAAA;AAoBX,SAASvC,EAAAwC,KAAA,EAKP;EAAA,IALO;IAAqBtE,UAAA,EAC5BiC,CAAA;IAD4B/B,SAAA,EAE5BuB,CAAA;IAF4BrB,WAAA,EAG5BsB,CAAA;IAH4BpB,IAAA,EAI5Be,CAAA;IAJ4BX,KAAA,EAK5Ba;EAAA,IAAA+C,KAAA;EAEA,MAAMxC,CAAA,IAAiBG,CAAA,CAAWoB,KAAA,GAAQ5B,CAAA,CAAU4B,KAAA,IAAS;IACvDrB,CAAA,IAAiBC,CAAA,CAAWF,MAAA,GAASN,CAAA,CAAU4B,KAAA,IAAS;IAGxDnB,CAAA,GADc;MAAEG,GAAA,EAAK;MAAGI,KAAA,EAAO;MAAIC,MAAA,EAAQ;MAAKC,IAAA,GAAO;IAAA,EAChCtB,CAAA;IACvBpB,CAAA,GAAoB+D,IAAA,CAAKO,GAAA,CAAI9C,CAAA,CAAU4B,KAAA,EAAO5B,CAAA,CAAUM,MAAA;IAExD5B,CAAA,GAAyB;MAI7BkD,KAAA,EAAQ,GAAEpD,CAAA;MACV8B,MAAA,EAAS,GAAE9B,CAAA;MAGX8D,SAAA,EAAY,UAAS7B,CAAA;MACrB4B,UAAA,EAAY;MAGZF,QAAA,EAAU;MACV,CAACvC,CAAA,GAAO;MAMRmD,SAAA,EAAWzE,CAAA,CAAqBsB,CAAA,EAAME,CAAA;IAAA;EA2BxC,OAxBa,UAATF,CAAA,IAA2B,aAATA,CAAA,KACN,YAAVE,CAAA,KACFpB,CAAA,CAAOwC,IAAA,GAAQ,GAAEjB,CAAA,OAEL,aAAVH,CAAA,KACFpB,CAAA,CAAOwC,IAAA,GAAQ,GAAEb,CAAA,OAEL,UAAVP,CAAA,KACFpB,CAAA,CAAOsC,KAAA,GAAS,GAAEf,CAAA,QAIT,WAATL,CAAA,IAA4B,YAATA,CAAA,KACP,YAAVE,CAAA,KACFpB,CAAA,CAAOkC,GAAA,GAAO,GAAEX,CAAA,OAEJ,aAAVH,CAAA,KACFpB,CAAA,CAAOkC,GAAA,GAAO,GAAEL,CAAA,OAEJ,UAAVT,CAAA,KACFpB,CAAA,CAAOuC,MAAA,GAAU,GAAEhB,CAAA,QAIhBvB,CAAA;AAAA;AAMT,SAASJ,EAAqBkC,CAAA,EAAYR,CAAA;EACxC,QAAc,UAATQ,CAAA,IAA2B,YAATA,CAAA,IAA+B,UAAVR,CAAA,MAI9B,aAATQ,CAAA,IAA8B,WAATA,CAAA,IAA8B,UAAVR,CAAA,IAIvC,QAPE;AAAA;AAaX,SAASO,EAAgBC,CAAA;EAOvB,OAN0C;IACxCI,GAAA,EAAK;IACLI,KAAA,EAAO;IACPC,MAAA,EAAQ;IACRC,IAAA,EAAM;EAAA,EAEaV,CAAA;AAAA;AAmBvB,SAASC,EAEPD,CAAA,EAEAR,CAAA;EAEA,OAAO;IACLY,GAAA,EAAKJ,CAAA,CAAKI,GAAA,GAAMZ,CAAA,CAAwBY,GAAA;IACxCI,KAAA,EAAOR,CAAA,CAAKQ,KAAA,GAAQhB,CAAA,CAAwBgB,KAAA;IAC5CC,MAAA,EAAQT,CAAA,CAAKS,MAAA,GAASjB,CAAA,CAAwBiB,MAAA;IAC9CC,IAAA,EAAMV,CAAA,CAAKU,IAAA,GAAOlB,CAAA,CAAwBkB;EAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}